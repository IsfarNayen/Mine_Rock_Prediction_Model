{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8024617,"sourceType":"datasetVersion","datasetId":4729000}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra, numpy array\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv) and loading our data\nfrom sklearn.model_selection import train_test_split #Used for splitting train and test data automatically\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:00:24.130365Z","iopub.execute_input":"2025-02-28T19:00:24.130606Z","iopub.status.idle":"2025-02-28T19:00:27.780179Z","shell.execute_reply.started":"2025-02-28T19:00:24.130572Z","shell.execute_reply":"2025-02-28T19:00:27.779303Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Loading dataset \nsonar_data = pd.read_csv('/kaggle/input/sonar-data/sonar data.csv' , header=None) #No head in the data\nsonar_data.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:00:51.490621Z","iopub.execute_input":"2025-02-28T19:00:51.490943Z","iopub.status.idle":"2025-02-28T19:00:51.568332Z","shell.execute_reply.started":"2025-02-28T19:00:51.490919Z","shell.execute_reply":"2025-02-28T19:00:51.567545Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Columns and rows number of data\nsonar_data.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:00:56.452021Z","iopub.execute_input":"2025-02-28T19:00:56.452361Z","iopub.status.idle":"2025-02-28T19:00:56.457256Z","shell.execute_reply.started":"2025-02-28T19:00:56.452333Z","shell.execute_reply":"2025-02-28T19:00:56.456530Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#mean/standard and statistical deviation of the data\nsonar_data.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:00:57.351615Z","iopub.execute_input":"2025-02-28T19:00:57.351924Z","iopub.status.idle":"2025-02-28T19:00:57.446931Z","shell.execute_reply.started":"2025-02-28T19:00:57.351897Z","shell.execute_reply":"2025-02-28T19:00:57.446261Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Individual element number counts\nsonar_data[60].value_counts() #60th column is the rock and mine count, that is why 60th column is taken","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:00.969606Z","iopub.execute_input":"2025-02-28T19:01:00.969918Z","iopub.status.idle":"2025-02-28T19:01:00.982030Z","shell.execute_reply.started":"2025-02-28T19:01:00.969891Z","shell.execute_reply":"2025-02-28T19:01:00.981046Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Mean value of all the axis for rock and mine\nsonar_data.groupby(60).mean() #The column must be in string or object","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:01.792640Z","iopub.execute_input":"2025-02-28T19:01:01.792915Z","iopub.status.idle":"2025-02-28T19:01:01.818438Z","shell.execute_reply.started":"2025-02-28T19:01:01.792894Z","shell.execute_reply":"2025-02-28T19:01:01.817546Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Separative data and lebel\n#60th column is dropped, means the rest is kept\n#As 60th column is lebel, so the rest is the features, X is the features\n#for dataframe.drop() whatever the issue is, always columns must be used\nX = sonar_data.drop(columns = 60 , axis = 1) #axis = 0 is row dropping , axis = 1 is column dropping\n#60th column is the lebel, Y is lebel\nY = sonar_data[60]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:05.626069Z","iopub.execute_input":"2025-02-28T19:01:05.626515Z","iopub.status.idle":"2025-02-28T19:01:05.631668Z","shell.execute_reply.started":"2025-02-28T19:01:05.626475Z","shell.execute_reply":"2025-02-28T19:01:05.630799Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Printing features\nX","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:06.597373Z","iopub.execute_input":"2025-02-28T19:01:06.597706Z","iopub.status.idle":"2025-02-28T19:01:06.621105Z","shell.execute_reply.started":"2025-02-28T19:01:06.597676Z","shell.execute_reply":"2025-02-28T19:01:06.620148Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Printing lebels\nY","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:11.454380Z","iopub.execute_input":"2025-02-28T19:01:11.454703Z","iopub.status.idle":"2025-02-28T19:01:11.460712Z","shell.execute_reply.started":"2025-02-28T19:01:11.454677Z","shell.execute_reply":"2025-02-28T19:01:11.459747Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#train test sequence must be maintained for argument returning\n#test size 0.1 means, 10% of data is used for testing\n#Stratify is the number of classes the lebel has, here Rock and Mine, they are splitted almost equally\n#random_state is a perticular way of splitting, 1 is splitted in a perticular order, which is universal\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1 , stratify = Y , random_state = 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:13.668623Z","iopub.execute_input":"2025-02-28T19:01:13.668903Z","iopub.status.idle":"2025-02-28T19:01:13.677195Z","shell.execute_reply.started":"2025-02-28T19:01:13.668881Z","shell.execute_reply":"2025-02-28T19:01:13.676139Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Watching the shapes of features\nprint(X.shape, X_train.shape, X_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:16.837561Z","iopub.execute_input":"2025-02-28T19:01:16.837845Z","iopub.status.idle":"2025-02-28T19:01:16.842942Z","shell.execute_reply.started":"2025-02-28T19:01:16.837823Z","shell.execute_reply":"2025-02-28T19:01:16.842034Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now Model will run through Logistic regression model","metadata":{}},{"cell_type":"code","source":"model = LogisticRegression()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:19.354789Z","iopub.execute_input":"2025-02-28T19:01:19.355114Z","iopub.status.idle":"2025-02-28T19:01:19.358683Z","shell.execute_reply.started":"2025-02-28T19:01:19.355087Z","shell.execute_reply":"2025-02-28T19:01:19.357828Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.fit(X_train , Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:23.735554Z","iopub.execute_input":"2025-02-28T19:01:23.735863Z","iopub.status.idle":"2025-02-28T19:01:23.790979Z","shell.execute_reply.started":"2025-02-28T19:01:23.735837Z","shell.execute_reply":"2025-02-28T19:01:23.790301Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Accuracy checking\nPrediction = model.predict(X_train)\nAccuracy_check = accuracy_score(Prediction , Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:24.593459Z","iopub.execute_input":"2025-02-28T19:01:24.593740Z","iopub.status.idle":"2025-02-28T19:01:24.600792Z","shell.execute_reply.started":"2025-02-28T19:01:24.593719Z","shell.execute_reply":"2025-02-28T19:01:24.600156Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Accuracy on training data is:\" , Accuracy_check * 100 ,\"%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:25.486711Z","iopub.execute_input":"2025-02-28T19:01:25.486989Z","iopub.status.idle":"2025-02-28T19:01:25.491910Z","shell.execute_reply.started":"2025-02-28T19:01:25.486968Z","shell.execute_reply":"2025-02-28T19:01:25.491283Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Prediction = model.predict(X_test)\nAccuracy_check = accuracy_score(Prediction , Y_test)\nprint(\"Test accuracy:\" , Accuracy_check * 100 , \"%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:26.129022Z","iopub.execute_input":"2025-02-28T19:01:26.129342Z","iopub.status.idle":"2025-02-28T19:01:26.137022Z","shell.execute_reply.started":"2025-02-28T19:01:26.129317Z","shell.execute_reply":"2025-02-28T19:01:26.136137Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Taking input","metadata":{}},{"cell_type":"code","source":"#An exmaple: 0.0200,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.0660,0.2273,0.3100,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.5550,0.6711,0.6415,0.7104,0.8080,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.0510,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.0180,0.0084,0.0090,0.0032\ninput_data = list(map(float, input().split(','))) #splitting the input data based on comma\narray = np.asarray(input_data) # Creating numpy array, because model prediction accepts only numpy or pandas array\n\npandas_array = pd.DataFrame([input_data]) # From video I found video on numpy array, Now I included Pandas array\npandas_array","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:01:44.751544Z","iopub.execute_input":"2025-02-28T19:01:44.751846Z","iopub.status.idle":"2025-02-28T19:01:52.532442Z","shell.execute_reply.started":"2025-02-28T19:01:44.751824Z","shell.execute_reply":"2025-02-28T19:01:52.531623Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"r , c = X.shape\n\nif len(input_data) % c != 0: # If the number of rows are not multiplication of feature number, error will occur\n    print(\"Please enter\" ,  c , \"values\")\nelse:\n    array = array.reshape(1 , -1)\n    prediction = model.predict(pandas_array) # Prediction can be done with pandas or numpy array\n    \n    if prediction == 'R':\n        print('The object is a rock')\n    else:\n        print('The object is a mine')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T19:02:09.286540Z","iopub.execute_input":"2025-02-28T19:02:09.286811Z","iopub.status.idle":"2025-02-28T19:02:09.293204Z","shell.execute_reply.started":"2025-02-28T19:02:09.286791Z","shell.execute_reply":"2025-02-28T19:02:09.292484Z"}},"outputs":[],"execution_count":null}]}